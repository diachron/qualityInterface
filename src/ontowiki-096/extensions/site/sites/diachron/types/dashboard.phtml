<ul id="tab-container" class="nav nav-tabs" role="tablist">
	<li class="active"><a href="#detail">Detail</a></li>
	<li><a href="Statistics">Statistics</a></li>
	<li><a href="#assessment">Assessment</a></li>
</ul>
<div class="tab-content">
	<div class="tab-pane active" id="detail">
		<div class="layout-col" style="width:300px;">
			<h4>Facets</h4>
			<div class="panel panel-default controls-bar">
				<div class="panel panel-default">
				  <div class="panel-heading">Category</div>
				  <div class="panel-body">
				  	<div id="btnListCategories" class="btn-group-vertical btn-group-sm btn-list" data-toggle="buttons">
					</div>
				  </div>
				</div>
				<div class="panel panel-default">
				  <div class="panel-heading">Dimension</div>
				  <div class="panel-body">
				  	<div id="btnListDimensions" class="btn-group-vertical btn-group-sm btn-list" data-toggle="buttons">
					</div>
				  </div>
				</div>
				<div class="panel panel-default">
				  <div class="panel-heading">Metric</div>
				  <div class="panel-body">
				  	<div id="btnListMetrics" class="btn-group-vertical btn-group-sm btn-list" data-toggle="buttons">
					</div>
				  </div>
				</div>
			</div>
			<h4>Filters</h4>
			<div class="panel panel-default controls-bar">
				<div class="checkbox">
					<label>
						<input type="checkbox" value="">Available
					</label>
				</div>
			</div>
		</div>
		<div class="layout-col" style="min-width:500px; max-width:700px">
			<div class="input-group">
				<span class="input-group-addon">
			  		<span class="glyphicon glyphicon-search"></span>
			  	</span>
			  	<input type="text" class="form-control" placeholder="Search">
			</div>
			<div style="width:100%; margin-top:15px;">
				<div id="lst-datasets" class="list-group">
					<a href="#" class="list-group-item">
				    	<h4 class="list-group-item-heading">A collection of LREC2014 submissions</h4>
				    	<p class="list-group-item-text">
				    		The submission is the pointer to papers and to authors.
				    	</p>
				    	<p class="list-group-item-text lst-datasets-actions">
			    			<button type="button" class="btn btn-primary btn-xs">Application/rdf+xml</button>&nbsp;&nbsp;
							<button type="button" class="btn btn-success btn-xs">Quality metadata/rdf+xml</button>
				    	</p>
				  	</a>
				  	<a href="#" class="list-group-item">
				    	<h4 class="list-group-item-heading">RDF Licenses</h4>
				    	<p class="list-group-item-text">
				    		This small dataset contains licenses (suitable for general works, data, etc.) expressed as RDF.
				    	</p>
				    	<p class="list-group-item-text lst-datasets-actions">
			    			<button type="button" class="btn btn-primary btn-xs">Application/turtle</button>&nbsp;&nbsp;
							<button type="button" class="btn btn-success btn-xs">Quality metadata/turtle</button>
				    	</p>
				  	</a>
				  	<a href="#" class="list-group-item">
				    	<h4 class="list-group-item-heading">DisGeNET</h4>
				    	<p class="list-group-item-text">
				    		Linked Data version of DisGeNET, which is a Resource Description Framework (RDF) representation of a vast 
				    		database integrating gene-disease associations from several...
				    	</p>
				    	<p class="list-group-item-text lst-datasets-actions">
			    			<button type="button" class="btn btn-primary btn-xs">Application/turtle</button>&nbsp;&nbsp;
							<button type="button" class="btn btn-success btn-xs">Quality metadata/turtle</button>&nbsp;&nbsp;
							<button type="button" class="btn btn-info btn-xs">api/sparql</button>&nbsp;&nbsp;
							<button type="button" class="btn btn-warning btn-xs">rdf/void</button>&nbsp;&nbsp;
							<button type="button" class="btn btn-default btn-xs">metadata/schema</button>
				    	</p>
				  	</a>
				</div>
			</div>
		</div>
		<div class="layout-clear"></div>
	</div>
	<div class="tab-pane" id="stats">
		Lots of stats
	</div>
	<div class="tab-pane" id="assessment">
		Lots of assessment
	</div>
</div>

<script type="text/javascript">

	// An object containing the hierarchy of categories -> dimensions -> metrics
	var metricsSet = null;

	// Document ready event handler
	$(function() {
		// Load quality categories, dimensions and metrics
		loadAvailableMetrics();
	});

	$('#lst-datasets .list-group-item').click(function (e) {
	  e.preventDefault();
	});

	// Loads the categories, dimensions and metrics defined in the DQM knowledgebase and 
	// creates the UI elements representing them
	function loadAvailableMetrics() {
		// Retrieve existing metrics from the Quality knowledgebase
		var arrMetrics = lodDataAccess.selectMetrics();

		var btnListCategories = $("#btnListCategories");
		var btnListDimensions = $("#btnListDimensions");
		var btnListMetrics = $("#btnListMetrics");

		// Remove buttons of previous categories, dimensions and metrics
		btnListCategories.empty();
		btnListDimensions.empty();
		btnListMetrics.empty();
		
		// Build a convenient mapped representation of the hierarchy of categories -> dimensions -> metrics
		metricsSet = {};
		var curMetric = null;
		var curCategory = null;
		var curDimension = null;
		
		for(var m = 0; m < arrMetrics.length; m++) {
			curMetric = arrMetrics[m];
			
			// Check if the current category has already been added to the set
			curCategory = metricsSet[curMetric.category_name];
			if(curCategory === undefined || curCategory === null) {
				curCategory = { name: curMetric.category_name, selected: false, dimensions: {} };
				metricsSet[curMetric.category_name] = curCategory;

				// Create a DOM button corresponding to the newly added category
				btnListCategories.append("<button type='button' id='btnSel_" + curMetric.category_name + "' class='btn btn-default' onclick='toggleCategory(\"" + curMetric.category_name + "\")'>" + curMetric.category_name + "</button>");
			}

			// Check if the current dimension has already been added to the category
			curDimension = curCategory.dimensions[curMetric.dimension_uri];
			if(curDimension === undefined || curDimension === null) {
				curDimension = { name: curMetric.dimension_name, selected: false, metrics: new Array() };
				curCategory.dimensions[curMetric.dimension_uri] = curDimension;

				// Create a DOM button corresponding to the newly added dimension (hidden by default)
				btnListDimensions.append("<button type='button' id='btnSel_" + curMetric.category_name + "_" + curMetric.dimension_name + "' style='display:none' class='btn btn-default' onclick='toggleDimension(\"" + curMetric.category_name + "\", \"" + curMetric.dimension_uri + "\")'>" + curMetric.dimension_name + "</button>");
			}

			// Add the current metric to the dimension, which is an array of metrics
			curDimension.metrics.push({ name: curMetric.metric_name, uri: curMetric.metric_uri, selected: false });

			// Create a DOM button corresponding to each metric (hidden by default)
			btnListMetrics.append("<button type='button' id='btnSel_" + curMetric.category_name + "_" + curMetric.dimension_name + "_" + curMetric.metric_name + "' style='display:none' class='btn btn-default' onclick='toggleMetric(\"" + curMetric.category_name + "\", \"" + curMetric.dimension_uri + "\", \"" + curMetric.metric_uri + "\")'>" + curMetric.metric_name + "</button>");
		}
	}

	// Add/remove the toggled category to/from the set of selected categories
	function toggleCategory(selected) {

		var btnListDimensions = $("#btnListDimensions");
		var btnListMetrics = $("#btnListMetrics");
		var newState = !(metricsSet[selected].selected);
		
		// Update category state
		metricsSet[selected].selected = newState;

		// Update UI
		if(newState) {
			// Show buttons corresponding to the dimensions of the selected category
			$.map(metricsSet[selected].dimensions, function(dimensionObj, dimensionURI) {
				$("#btnSel_" + selected + "_" + dimensionObj.name, btnListDimensions).show();
			});
		} else {
			// Uncheck dimensions of the selected category
			$.map(metricsSet[selected].dimensions, function(dimensionObj, dimensionURI) {
				$("#btnSel_" + selected + "_" + dimensionObj.name, btnListDimensions).hide().removeClass("active");
				dimensionObj.selected = false;

				// Uncheck metrics of the selected dimension
				$.map(dimensionObj.metrics, function(metricObj) {
					$("#btnSel_" + selected + "_" + dimensionObj.name + "_" + metricObj.name, btnListMetrics).hide().removeClass("active");
					metricObj.selected = false;
				});
			});
		}
	}

	// Toggle the selected status of a dimension, given its URI and the name of the category it belongs to
	function toggleDimension(categoryName, dimensionURI) {

		var dimensionObj = metricsSet[categoryName].dimensions[dimensionURI];
		var btnListDimensions = $("#btnListDimensions");
		var btnListMetrics = $("#btnListMetrics");
		var newState = !(dimensionObj.selected);

		// Update dimension state
		dimensionObj.selected = newState;

		// Update UI
		if(newState) {
			// Show buttons corresponding to the metrics of the selected dimension
			$.map(dimensionObj.metrics, function(metricObj) {
				$("#btnSel_" + categoryName + "_" + dimensionObj.name + "_" + metricObj.name, btnListMetrics).show();
			});
		} else {
			// Uncheck metrics of the selected dimension
			$.map(dimensionObj.metrics, function(metricObj) {
				$("#btnSel_" + categoryName + "_" + dimensionObj.name + "_" + metricObj.name, btnListMetrics).hide().removeClass("active");
				metricObj.selected = false;
			});
		}
	}

	// Toggle the selected status of a metric, given its URI and the names  
	// of the dimension and category it belongs to 
	function toggleMetric(categoryName, dimensionURI, metricURI) {
		// TODO: Implement
	}

</script>