<ul id="tab-container" class="nav nav-tabs" role="tablist">
	<li class="active"><a>Detail</a></li>
	<li><a href="Statistics">Statistics</a></li>
	<li><a href="Assessment">Assessment</a></li>
</ul>
<div class="tab-content">
	<div class="tab-pane active" id="detail">
		<div class="layout-col" style="width:300px;">
			<h4>Facets</h4>
			<div class="panel panel-default controls-bar">
				<div class="panel panel-default">
				  <div class="panel-heading">Category</div>
				  <div class="panel-body">
				  	<div id="btnListCategories" class="btn-group-vertical btn-group-sm btn-list" data-toggle="buttons">
					</div>
				  </div>
				</div>
				<div class="panel panel-default">
				  <div class="panel-heading">Dimension</div>
				  <div class="panel-body">
				  	<div id="btnListDimensions" class="btn-group-vertical btn-group-sm btn-list" data-toggle="buttons">
					</div>
				  </div>
				</div>
				<div class="panel panel-default">
				  <div class="panel-heading">Metric</div>
				  <div class="panel-body">
				  	<div id="btnListMetrics" class="btn-group-vertical btn-group-sm btn-list" data-toggle="buttons">
					</div>
				  </div>
				</div>
			</div>
			<!-- TODO: Implement filters
			<h4>Filters</h4>
			<div class="panel panel-default controls-bar">
				<div class="checkbox">
					<label>
						<input type="checkbox" value="">Available
					</label>
				</div>
			</div> -->
		</div>
		<div class="layout-col" style="min-width:500px; max-width:700px">
			<div class="input-group">
				<span class="input-group-addon">
			  		<span class="glyphicon glyphicon-search"></span>
			  	</span>
			  	<input type="text" class="form-control" placeholder="Search">
			</div>
			<div style="width:100%; margin-top:15px;">
				<div id="lst-datasets" class="list-group">
					<span>Please select a Category, Dimension and Metric whereby the DataSets are to be ranked.</span>
				</div>
			</div>
		</div>
		<div class="layout-clear"></div>
	</div>
	
	<!-- Templates -->
	<div id="tmplDataSetItem" style="display:none">
		<a class="list-group-item">
	    	<h4 class="list-group-item-heading">[[name]]</h4>
	    	<p class="list-group-item-text">
	    		[[description]]
	    	</p>
	    	<p class="list-group-item-text lst-datasets-actions">
    			<button type="button" class="btn btn-primary btn-xs" style="display:none;">Application/rdf+xml</button>&nbsp;&nbsp;
				<button type="button" class="btn btn-danger btn-xs" onclick="visualizeDataSet('[[dataset_uri]]')">Visualise Quality</button>
	    	</p>
	  	</a>
	</div>
	<!-- .Templates -->
</div>

<script type="text/javascript">

	// An object containing the hierarchy of categories -> dimensions -> metrics
	var metricsSet = null;

	// Document ready event handler
	$(function() {
		// Load quality categories, dimensions and metrics
		loadAvailableMetrics();
	});

	$('#lst-datasets .list-group-item').click(function (e) {
	  e.preventDefault();
	});

	// Loads the categories, dimensions and metrics defined in the DQM knowledgebase and 
	// creates the UI elements representing them
	function loadAvailableMetrics() {
		// Retrieve existing metrics from the Quality knowledgebase
		var arrMetrics = lodDataAccess.selectComputedMetrics();

		var btnListCategories = $("#btnListCategories");
		var btnListDimensions = $("#btnListDimensions");
		var btnListMetrics = $("#btnListMetrics");

		// Remove buttons of previous categories, dimensions and metrics
		btnListCategories.empty();
		btnListDimensions.empty();
		btnListMetrics.empty();
		
		// Build a convenient mapped representation of the hierarchy of categories -> dimensions -> metrics
		metricsSet = {};
		var curMetric = null;
		var curCategory = null;
		var curDimension = null;
		
		for(var m = 0; m < arrMetrics.length; m++) {
			curMetric = arrMetrics[m];
			
			// Check if the current category has already been added to the set
			curCategory = metricsSet[curMetric.category_name];
			if(curCategory === undefined || curCategory === null) {
				curCategory = { name: curMetric.category_name, selected: false, dimensions: {} };
				metricsSet[curMetric.category_name] = curCategory;

				// Create a DOM button corresponding to the newly added category
				btnListCategories.append("<button type='button' id='btnSel_" + curMetric.category_name + "' class='btn btn-default' onclick='toggleCategory(\"" + curMetric.category_name + "\")'>" + curMetric.category_name + "</button>");
			}

			// Check if the current dimension has already been added to the category
			curDimension = curCategory.dimensions[curMetric.dimension_uri];
			if(curDimension === undefined || curDimension === null) {
				curDimension = { name: curMetric.dimension_name, selected: false, metrics: new Array() };
				curCategory.dimensions[curMetric.dimension_uri] = curDimension;

				// Create a DOM button corresponding to the newly added dimension (hidden by default)
				btnListDimensions.append("<button type='button' id='btnSel_" + curMetric.category_name + "_" + curMetric.dimension_name + "' style='display:none' class='btn btn-default' onclick='toggleDimension(\"" + curMetric.category_name + "\", \"" + curMetric.dimension_uri + "\")'>" + curMetric.dimension_name + "</button>");
			}

			// Add the current metric to the dimension, which is an array of metrics
			curDimension.metrics.push({ name: curMetric.metric_name, uri: curMetric.metric_uri, selected: false });

			// Create a DOM button corresponding to each metric (hidden by default)
			btnListMetrics.append("<button type='button' id='btnSel_" + curMetric.category_name + "_" + curMetric.dimension_name + "_" + curMetric.metric_name + "' style='display:none' class='btn btn-default' metricUri='" + curMetric.metric_uri + "' onclick='toggleMetric.call(this, \"" + curMetric.category_name + "\", \"" + curMetric.dimension_uri + "\", \"" + curMetric.metric_uri + "\")'>" + curMetric.metric_label + "</button>");
		}
	}

	// Add/remove the toggled category to/from the set of selected categories
	function toggleCategory(selected) {

		var btnListDimensions = $("#btnListDimensions");
		var btnListMetrics = $("#btnListMetrics");
		var newState = !(metricsSet[selected].selected);
		
		// Update category state
		metricsSet[selected].selected = newState;

		// Update UI
		if(newState) {
			// Show buttons corresponding to the dimensions of the selected category
			$.map(metricsSet[selected].dimensions, function(dimensionObj, dimensionURI) {
				$("#btnSel_" + selected + "_" + dimensionObj.name, btnListDimensions).show();
			});
		} else {
			// Uncheck dimensions of the selected category
			$.map(metricsSet[selected].dimensions, function(dimensionObj, dimensionURI) {
				$("#btnSel_" + selected + "_" + dimensionObj.name, btnListDimensions).hide().removeClass("active");
				dimensionObj.selected = false;

				// Uncheck metrics of the selected dimension
				$.map(dimensionObj.metrics, function(metricObj) {
					$("#btnSel_" + selected + "_" + dimensionObj.name + "_" + metricObj.name, btnListMetrics).hide().removeClass("active");
					metricObj.selected = false;
				});
			});
		}
	}

	// Toggle the selected status of a dimension, given its URI and the name of the category it belongs to
	function toggleDimension(categoryName, dimensionURI) {

		var dimensionObj = metricsSet[categoryName].dimensions[dimensionURI];
		var btnListDimensions = $("#btnListDimensions");
		var btnListMetrics = $("#btnListMetrics");
		var newState = !(dimensionObj.selected);

		// Update dimension state
		dimensionObj.selected = newState;

		// Update UI
		if(newState) {
			// Show buttons corresponding to the metrics of the selected dimension
			$.map(dimensionObj.metrics, function(metricObj) {
				$("#btnSel_" + categoryName + "_" + dimensionObj.name + "_" + metricObj.name, btnListMetrics).show();
			});
		} else {
			// Uncheck metrics of the selected dimension
			$.map(dimensionObj.metrics, function(metricObj) {
				$("#btnSel_" + categoryName + "_" + dimensionObj.name + "_" + metricObj.name, btnListMetrics).hide().removeClass("active");
				metricObj.selected = false;
			});
		}
	}

	// Toggle the selected status of a metric, given its URI and the names  
	// of the dimension and category it belongs to 
	function toggleMetric(categoryName, dimensionURI, metricURI) {

		// TODO: Allow several metrics to be selected
		// Build the list of currently selected metrics
// 		var btnListMetrics = $("#btnListMetrics");
// 		var arrSelMetrics = $("button.active", btnListMetrics).map( function(elemIx, domElem) {
// 			return $(domElem).attr("metricUri");
// 		}).get();

		// Set all other metrics as inactive (only one metric can be selected at a time)
		$(this).siblings().removeClass("active");
		
		// Clean the contents of the container holding the list of DataSets
		var dsContainer = $("#lst-datasets").empty();
		
		// Retrieve datasets for which the metric has been computed
		var arrDataSets = lodDataAccess.selectDataSetsByMetric(metricURI); 

		// Build DOM element representing the DataSet, from template...
		var strTmplDataSet = $("#tmplDataSetItem").html();

		for(var i = 0; i < arrDataSets.length; i++) {
			var curDataSetHtml = strTmplDataSet
									.replace("[[name]]", arrDataSets[i]["dataset_label"])
									.replace("[[description]]", arrDataSets[i]["dataset_comment"])
									.replace("[[dataset_uri]]", arrDataSets[i]["dataset_uri"]);
			
			// and append each DOM element to the container 
			dsContainer.append(curDataSetHtml);
		}
	}

	// Show the Cube visualization for the DataSet specified as parameter
	function visualizeDataSet(dataSetURI) {
		// Redirect to Statistics page, specifying the URL of the DataSet to be visualized as target model
		window.location = "Statistics.html?m=" + encodeURIComponent(dataSetURI);
	}

</script>